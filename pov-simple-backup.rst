=================
pov-simple-backup
=================

--------------------------------------
create non-incremental nightly backups
--------------------------------------

:Author: Marius Gedminas <marius@gedmin.as>
:Date: 2016-08-18
:Version: 0.11
:Manual section: 8


SYNOPSIS
========

**pov-simple-backup** [**-v**] [**-n**] [**-o** | **-s**] [**-f** *configfile*]

**pov-simple-backup** **-S** [**-v**] [**-f** *configfile*]

**pov-simple-backup** **-g** > *configfile*

**pov-simple-backup** **-h**


DESCRIPTION
===========

**pov-simple-backup** is run every night from cron to create a nightly
backup to ``/backup/YYYY-MM-DD``.  You specify things you want backed up
in ``/etc/pov/backup``.  If that file doesn't exist, the cron script
does nothing, silently.


OPTIONS
=======

-h           Print brief usage message and exit.
-v           Verbose output: show what is being backed up.
-n           Only print things that are being backed up, don't actually
             back them up.
-o           Overwrite existing backup files instead of aborting.
-s           Skip existing backup files instead of aborting.
-S           Instead of taking a backup, estimate the size of backups.
-g           Instead of taking a backup generate a config file and print it
             to the standard output.
-f FILENAME  Use the specified config file instead of ``/etc/pov/backup``.


CONFIGURATION FILE
==================

``/etc/pov/backup`` is a shell script that can use any of the available
backup commands.

Example ::

    back_up /etc
    back_up /root
    back_up /usr/local
    back_up /var/cache/debconf/config.dat
    back_up_dpkg_selections
    back_up_postgresql
    clean_up_old_backups 14
    copy_backup_to user@otherserver:/backup/myhostname/ -i /path/to/ssh-key.rsa

Usually you'll generate a skeleton with ::

    pov-simple-backup -g > /etc/pov/backup

and then edit it to suit your needs.


CONFIG FILE VARIABLES
=====================

The values of these influence backup commands.

**BACKUP_ROOT** (default: ``/backup``)
  Location for the backups

  Example::

    BACKUP_ROOT=/backups/$(hostname -s)

    back_up /etc
    ...


**BACKUP_SUFFIX** (default: empty)
  Suffix for backup directories

  Example::

    back_up /etc
    ...
    clean_old_backups 14

    BACKUP_SUFFIX=-db
    back_up_postgresql
    clean_old_backups 2

  would keep 14 nightly backups in /backup/YYYY-MM-DD, and two
  PostgreSQL nightly backups in /backup/YYYY-MM-DD-db


CONFIG FILE COMMANDS
====================

.. documentation generated by running ./extract-documentation.py

back_up <pathname> [<tar options>]
  Back up a directory or a single file

  Creates <filename>.tar.gz, where the <filename> is constructed
  from the <pathname> by stripping leading slashes and replacing
  all other slashes with hyphens.

  Examples::

      back_up /var/cache/debconf/config.dat
      back_up /opt/myapp --exclude opt/myapp/var/zdaemonsock

   would create var-cache-debconf-config.dat.tar.gz and opt-myapp.tar.gz

   Note: when using tar's ``--exclude``, be sure to omit both the leading and
   the trailing slash!  Otherwise it will be ignored.


back_up_to <name> <pathname> [<tar options>]
  Back up a directory or a file.

  Creates <name>.tar.gz.

  Examples::

      back_up_to backup-skeleton --no-recursive backups/host1 backups/host2

   Note: when using tar's ``--no-recursive``, be sure to specify it *before*
   the directory you don't want to recurse into.  Otherwise it may be
   ignored, depending on the version of tar.

   Note: when using tar's ``--exclude``, be sure to omit both the leading and
   the trailing slash!  Otherwise it will be ignored.

   Note: you can back up multiple files/directories, but you'll have
   to omit leading slashes to avoid warnings from tar.


back_up_uncompressed <pathname> [<tar options>]
  Back up a directory or a single file

  Creates <filename>.tar, where the <filename> is constructed
  from the <pathname> by stripping leading slashes and replacing
  all other slashes with hyphens.

  Examples::

      back_up_uncompressed /git/myrepo.git

   would create git-myrepo.git.tar

   Note: when using tar's ``--exclude``, be sure to omit both the leading and
   the trailing slash!  Otherwise it will be ignored.


back_up_uncompressed_to <name> <pathname> [<tar options>]
  Back up a directory or a file.

  Creates <name>.tar.

  Examples::

      back_up_uncompressed_to backup-skeleton --no-recursive /backups/host1 backups/host2

   Note: when using tar's ``--no-recursive``, be sure to specify it *before*
   the directory you don't want to recurse into.  Otherwise it may be
   ignored, depending on the version of tar.

   Note: when using tar's ``--exclude``, be sure to omit both the leading and
   the trailing slash!  Otherwise it will be ignored.

   Note: you can back up multiple files/directories, but you'll have
   to omit leading slashes to avoid warnings from tar.


back_up_dpkg_selections
  Back up dpkg selections (i.e. list of installed packages)

  Creates dpkg--get-selections.gz and var-lib-apt-extended_states.gz


back_up_postgresql
  Back up all PostgreSQL databases in the main cluster

  Creates postgresql-dump.sql.gz

  Bugs:

  - a single dump file for all databases is unwieldy
  - a text dump file is inefficient


back_up_mysql
  Back up all MySQL databases

  Creates mysql-dump.sql.gz

  Bugs:

  - a single dump file for all databases is unwieldy
  - a text dump file is inefficient


back_up_svn <pathname>
  Back up a single SVN repository

  Creates <filename>.svndump.gz, where the <filename> is constructed
  from the <pathname> by stripping leading slashes and replacing
  all other slashes with hyphens.

  Bugs:

  - does not back up hooks/ and conf/ subdirectories


  Example::

      back_up_svn /var/lib/svn/myrepo
      back_up /var/lib/svn/myrepo/conf
      back_up /var/lib/svn/myrepo/hooks



clean_up_old_backups <number> [<directory> [<suffix>]]
  Remove old backups, keep last <number>


  Example::

      clean_up_old_backups 14
      clean_up_old_backups 14 /backup/otherhost/
      clean_up_old_backups 14 /backup/ -git

  to keep just two weeks' backups


copy_backup_to [<user>@]<server>:<path> [<ssh options>]
  Copy today's backups to a remote server over SSH

  Alias for ``rsync_backup_to``.


  Example::

      copy_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  See also: rsync_backup_to, scp_backup_to


rsync_to <pathname> [<user>@]<server>:<path> [<ssh options>]
  Mirror a file or directory to a remote server over SSH, using rsync

  It means a lot to rsync whether or not you have a trailing slash at the end
  of <pathname>, when it's a directory.  No trailing slash: it will create a
  new directory with the same basename on the server side, under <path>.
  Trailing slash: it will make the contents of <path> on the server the same
  as contents of <pathname> here.


  Example::

      rsync_to /var/www/uploads backups@example.com:/backup/myhostname/uploads -i key.rsa



rsync_backup_to [<user>@]<server>:<path> [<ssh options>]
  Copy today's backups to a remote server over SSH, using rsync


  Example::

      rsync_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  See also: scp_backup_to, copy_backup_to


scp_backup_to [<user>@]<server>:<path> [<scp options>]
  Copy today's backups to a remote server over SSH, using scp

  Destination directory must exist on the remote host.


  Example::

      copy_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  Bugs:

  - if the remote directory already exists, creates a second copy, as a
    subdirectory (e.g. /backup/myhostname/2013-08-29/2013-08-29)

  See also: rsync_backup_to, copy_backup_to

.. end of generated chunk


BUGS
====

**pov-simple-backup** is reinventing the wheel, badly.  For example
it doesn't support incremental backups.

**back_up_to** is hard to use.
