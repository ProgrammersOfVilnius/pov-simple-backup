pov-simple-backup
=================

A daily cron script that backs things up into ``/backup/YYYY-MM-DD/``.

Quick start::

    sudo add-apt-repository ppa:pov/ppa
    sudo apt-get update
    sudo apt-get install pov-simple-backup

Things you want to back up are configured in ``/etc/pov/backup``, which
is actually a shell file that is sourced from the cron script.  If this
file is missing, ``pov-simple-backup`` does nothing.

Example configuration file::

    back_up /etc
    back_up /root
    back_up /usr/local
    back_up /var/cache/debconf/config.dat
    back_up_dpkg_selections
    back_up_postgresql
    clean_up_old_backups 14
    copy_backup_to user@otherserver:/backup/myhostname/ -i /path/to/ssh-key.rsa

You can also run a backup manually by running ``pov-simple-backup``.  The
following command-line options are available:

-h              show a brief help message
-v              print things that are being backed up
-n              only print things that are being backed up, don't
                actually back them up
-o              overwrite existing backup files
-s              skip existing backup files
-f CONFIG-FILE  use *CONFIG-FILE* instead of /etc/pov/backup


Backup commands for the config file
-----------------------------------

.. documentation generated by running ./extract-documentation.py

back_up <pathname> [<tar options>]
  Back up a directory or a single file

  Creates <filename>.tar.gz, where the <filename> is constructed
  from the <pathname> by stripping leading slashes and replacing
  all other slashes with hyphens.

  Examples::

      back_up /var/cache/debconf/config.dat
      back_up /opt/myapp --exclude 'opt/myapp/var/zdaemonsock'

   would create var-cache-debconf-config.dat.tar.gz and opt-myapp.tar.gz


back_up_dpkg_selections
  Back up dpkg selections (i.e. list of installed packages)

  Creates dpkg--get-selections.gz


back_up_postgresql
  Back up all PostgreSQL databases in the main cluster

  Creates postgresql-dump.sql.gz

  Bugs:

  - a single dump file for all databases is unwieldy
  - a text dump file is inefficient


back_up_mysql
  Back up all MySQL databases

  Creates mysql-dump.sql.gz

  Bugs:

  - a single dump file for all databases is unwieldy
  - a text dump file is inefficient


clean_up_old_backups <number> [<directory> [<suffix>]]
  Remove old backups, keep last <number>


  Example::

      clean_up_old_backups 14
      clean_up_old_backups 14 /backup/otherhost/
      clean_up_old_backups 14 /backup/ -git

  to keep just two weeks' backups


copy_backup_to [<user>@]<server>:<path> [<ssh options>]
  Copy today's backups to a remote server over SSH

  Destination directory must exist on the remote host.

  Alias for ``rsync_backup_to``.


  Example::

      copy_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  See also: rsync_backup_to, scp_backup_to


rsync_to <pathname> [<user>@]<server>:<path> [<ssh options>]
  Mirror a file or directory to a remote server over SSH, using rsync

  Destination directory must exist on the remote host.


  Example::

      rsync_to /var/www/uploads backups@example.com:/backup/myhostname/uploads -i key.rsa



rsync_backup_to [<user>@]<server>:<path> [<ssh options>]
  Copy today's backups to a remote server over SSH, using rsync

  Destination directory must exist on the remote host.


  Example::

      rsync_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  See also: scp_backup_to, copy_backup_to


scp_backup_to [<user>@]<server>:<path> [<scp options>]
  Copy today's backups to a remote server over SSH, using scp

  Destination directory must exist on the remote host.


  Example::

      copy_backup_to backups@example.com:/backup/myhostname/ -i key.rsa

  Bugs:

  - if the remote directory already exists, creates a second copy, as a
    subdirectory (e.g. /backup/myhostname/2013-08-29/2013-08-29)

  See also: rsync_backup_to, copy_backup_to

